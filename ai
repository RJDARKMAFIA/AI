import time
import random
import threading
from datetime import datetime
import json
import pyttsx3  # Text-to-speech library
import speech_recognition as sr  # Speech recognition library
import requests  # HTTP requests library
import webbrowser  # For opening web URLs
import geocoder  # For geocoding based on IP

# Initialize the text-to-speech engine
engine = pyttsx3.init()

# Initialize the speech recognizer
r = sr.Recognizer()

# API keys
API_KEY = 'ce22763a9e0059b680088826f0f23a75'
NEWS_API_KEY = 'b6347d633a114fe8b858767f146a237f'

# Global variables
reminders = []
alarm_file = 'alarms.json'

def save_alarm(alarm_time):
    """Save an alarm time to the alarms.json file."""
    alarms = load_alarms()
    alarms.append(alarm_time)
    with open(alarm_file, 'w') as f:
        json.dump(alarms, f)

def load_alarms():
    """Load alarm times from alarms.json file."""
    if os.path.exists(alarm_file):
        with open(alarm_file, 'r') as f:
            return json.load(f)
    return []

def check_alarms():
    """Check and trigger alarms based on current time."""
    while True:
        current_time = datetime.now()
        alarms = load_alarms()
        for alarm_time in alarms[:]:  # Iterate over a copy to avoid modification issues
            if current_time >= datetime.fromisoformat(alarm_time):
                speak("Alarm ringing!")
                alarms.remove(alarm_time)
                with open(alarm_file, 'w') as f:
                    json.dump(alarms, f)
        time.sleep(60)

def speak(text, lang="en-us"):
    """Convert text to speech."""
    engine.say(text)
    engine.runAndWait()

def greet_user():
    """Greet the user based on the current time of day."""
    current_hour = datetime.now().hour
    greetings = [
        ("Good morning!", "सुप्रभात!"),
        ("Good afternoon!", "नमस्कार!"),
        ("Good evening!", "शुभ संध्या!"),
        ("Good night!", "शुभ रात्रि!")
    ]
    greeting = greetings[0] if current_hour < 12 else greetings[1] if current_hour < 17 else greetings[2] if current_hour < 21 else greetings[3]
    speak(f"{greeting[0]} I am priya, your assistant. How can I help you today?")

def open_app(app_name, lang="en-us"):
    """Open a web app based on its name."""
    app_mapping = {
        "youtube": "https://www.youtube.com/",
        "whatsapp": "https://web.whatsapp.com/",
        "google": "https://www.google.com/",
        "facebook": "https://www.facebook.com/",
        "twitter": "https://twitter.com/",
        "instagram": "https://www.instagram.com/"
    }
    
    url = app_mapping.get(app_name.lower())
    if url:
        try:
            speak(f"Opening {app_name} for you.", lang)
            webbrowser.open(url)
        except Exception as e:
            speak(f"Sorry, I couldn't open {app_name}. Error: {e}", lang)
    else:
        speak(f"I can't find {app_name}. Please check the name.", lang)

def get_weather(city_name, lang="en-us"):
    """Get weather information for a given city."""
    url = "https://api.openweathermap.org/data/2.5/weather"
    params = {"q": city_name, "appid": API_KEY, "units": "metric"}
    try:
        response = requests.get(url, params=params)
        data = response.json()
        if response.status_code == 200:
            weather_info = (
                f"The weather in {city_name} is {data['weather'][0]['description']}. "
                f"Temperature is {data['main']['temp']}°C, humidity is {data['main']['humidity']}%, "
                f"and wind speed is {data['wind']['speed']} m/s."
            )
            speak(weather_info, lang)
        else:
            speak(f"Sorry, I couldn't fetch the weather information for {city_name} right now.", lang)
    except Exception as e:
        speak(f"Sorry, there was an error: {e}", lang)

def get_current_time(lang="en-us"):
    """Get the current time and speak it."""
    current_time = datetime.now().strftime("%H:%M:%S")
    speak(f"The current time is {current_time}.", lang)

def get_news_from_api(lang="en-us"):
    """Get top news headlines."""
    url = "https://newsapi.org/v2/top-headlines"
    params = {"country": "in", "apiKey": NEWS_API_KEY}
    try:
        response = requests.get(url, params=params)
        data = response.json()
        if response.status_code == 200:
            news_info = "Here are some of the latest news headlines: " + ". ".join(article['title'] for article in data['articles'][:3])
            speak(news_info, lang)
        else:
            speak("Sorry, I couldn't fetch the news right now.", lang)
    except Exception as e:
        speak(f"Sorry, there was an error fetching the news: {e}", lang)

def set_reminder(reminder_time_str, lang="en-us"):
    """Set a reminder for a specific time."""
    reminder_time = datetime.strptime(reminder_time_str, "%I %p")
    reminders.append(reminder_time)
    speak(f"Reminder set for: {reminder_time.strftime('%I:%M %p')}", lang)

def get_location():
    """Fetch current location based on IP geolocation."""
    try:
        g = geocoder.ip('me')
        return g.city, g.country
    except Exception as e:
        print(f"Error fetching location: {e}")
        return None, None

def convert_currency(amount, from_currency, to_currency, lang="en-us"):
    """Convert currency from one unit to another."""
    conversion_rate = 74.0  # Example rate
    converted_amount = amount * conversion_rate
    speak(f"{amount} {from_currency} is equal to {converted_amount} {to_currency}", lang)

def calculator(expression, lang="en-us"):
    """Evaluate a mathematical expression."""
    try:
        result = eval(expression)
        speak(f"The result of {expression} is {result}", lang)
    except Exception as e:
        speak(f"Sorry, there was an error calculating the result. Error: {e}", lang)

def process_whatsapp_message(user_input, lang="en-us"):
    """Process and send a WhatsApp message."""
    if "send message to" in user_input:
        contact_name = user_input.split("send message to")[-1].strip()
        speak(f"What message do you want to send to {contact_name} on WhatsApp?", lang)
        message_content = input("Enter your message: ")  # Simulated input for message content
        send_whatsapp_message(contact_name, message_content, lang)

def casual_conversation(user_input, lang="en-us"):
    """Respond to casual conversation queries."""
    responses = {
        "how are you": [
            "I'm just a program, but thanks for asking!",
            "I'm here and ready to help!",
        ],
        "what's your name": [
            "I'm priya, your virtual assistant.",
            "You can call me priya.",
        ],
        "tell me a joke": [
            "Why did the computer go to the doctor? Because it had a virus!",
            "Why was the computer cold? It left its Windows open!",
        ],
        "thank you": [
            "You're welcome! I'm here to help.",
            "No problem! Happy to assist.",
        ],
    }
    
    response = random.choice(responses.get(user_input.lower(), ["I'm here to help with anything you need!"]))
    speak(response, lang)

def speech_to_text():
    """Listen to user speech input and convert it to text."""
    with sr.Microphone() as source:
        print("Listening...")
        audio = r.listen(source)
        try:
            user_input = r.recognize_google(audio)
            print(f"User said: {user_input}")
            return user_input
        except sr.UnknownValueError:
            print("Could not understand audio")
        except sr.RequestError as e:
            print(f"Could not request results; {e}")

def set_alarm(time_str, lang="en-us"):
    """Set an alarm for a specific time."""
    time_str = time_str.lower().replace('a.m.', 'AM').replace('p.m.', 'PM')
    alarm_time = datetime.strptime(time_str, "%I:%M %p")
    save_alarm(alarm_time.isoformat())
    speak(f"Alarm set for {time_str}", lang)

def listen():
    """Main function to listen to user commands and respond."""
    while True:
        speak("")  # Trigger listening
        user_input = speech_to_text()
        if user_input:
            language = "en-us" if any(char.isascii() for char in user_input) else "hi"
            if "youtube" in user_input.lower():
                open_app("youtube", language)
            elif "time" in user_input:
                get_current_time(language)
            elif "weather" in user_input:
                get_weather("नोएडा", language)  # Assuming "नोएडा" is a placeholder for location
            elif "news" in user_input:
                get_news_from_api(language)
            elif "send message to" in user_input:
                process_whatsapp_message(user_input, language)
            elif "reminder" in user_input:
                reminder_time = user_input.split("reminder for")[-1].strip()
                set_reminder(reminder_time, language)
            elif "convert" in user_input:
                parts = user_input.split()
                amount = float(parts[1])
                from_currency = parts[2]
                to_currency = parts[4]
                convert_currency(amount, from_currency, to_currency, language)
            elif "calculate" in user_input:
                expression = user_input.split("calculate", 1)[1].strip()
                calculator(expression, language)
            elif "location" in user_input or "gps" in user_input:
                city, country = get_location()
                if city and country:
                    speak(f"You are currently in {city}, {country}.", language)
                else:
                    speak("Sorry, unable to fetch current location.", language)
            elif "set alarm for" in user_input:
                time_part = user_input.split("set alarm for")[-1].strip()
                set_alarm(time_part, language)
            elif "exit" in user_input or "quit" in user_input:
                speak("Goodbye! Have a nice day!", language)
                break
            else:
                casual_conversation(user_input, language)

def main():
    """Main function to start the assistant."""
    threading.Thread(target=check_alarms, daemon=True).start()
    greet_user()
    listen()

if __name__ == "__main__":
    main()
