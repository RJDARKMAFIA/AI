import speech_recognition as sr   # Voice recognition library
import random                     # To choose random words from list
import pyttsx3                    # Offline Text to Speech
import datetime                   # To get date and time
import webbrowser                 # To open and perform web tasks
import serial                     # For serial communication with Arduino
import pywhatkit                  # For more web automation
import time                       # Time-related functions
import threading                  # Threading for alarms
import json                       # JSON handling
import os                         # Operating system functions
import geocoder                   # For geocoding based on IP
import requests                   # HTTP requests

# Declare robot name (Wake-Up word)
robot_name = 'jaundice'

# Random words list
hi_words = ['hi', 'hello', 'yo baby', 'salam']
bye_words = ['bye', 'tata', 'hasta la vista']

# Initialize things
engine = pyttsx3.init()                    # Init text to speech engine
listener = sr.Recognizer()                 # Initialize speech recognition API

# Connect with NiNi motor driver board over serial communication
try:
    port = serial.Serial("COM15", 9600)     # Replace with your Arduino's serial port and baud rate
    print("Physical body, connected.")
except Exception as e:
    print(f"Unable to connect to my physical body: {e}")

# API keys and files
API_KEY = 'ce22763a9e0059b680088826f0f23a75'
NEWS_API_KEY = 'b6347d633a114fe8b858767f146a237f'
alarm_file = 'alarms.json'

# Global variables
reminders = []

def listen():
    """ Listen to what the user says """
    try:
        with sr.Microphone() as source:                         
            print("Talk>>")
            voice = listener.listen(source)                     
            command = listener.recognize_google(voice).lower()  
            print(command)

            if command.split(' ')[0] == robot_name:
                print("[Wake-up word found]")
                process(command)                 
    except sr.UnknownValueError:
        print("Could not understand audio")
    except sr.RequestError as e:
        print(f"Could not request results; {e}")
    except Exception as e:
        print(f"Error during listening: {e}")

def process(words):
    """ Process what the user says and take actions """
    print(words)

    word_list = words.split(' ')[1:]

    if len(word_list) == 1 and word_list[0] == robot_name:
        talk("How can I help you?")
        return

    if word_list[0] == 'play':
        talk("Okay boss, playing")
        extension = ' '.join(word_list[1:])
        port.write(b'u')
        pywhatkit.playonyt(extension)   
        port.write(b'l')          
    elif word_list[0] == 'search':
        port.write(b'u')
        talk("Okay boss, searching")
        port.write(b'l')
        extension = ' '.join(word_list[1:])
        pywhatkit.search(extension)
    elif word_list[0] == 'get' and word_list[1] == 'info':
        port.write(b'u')
        talk("Okay, I am right on it")
        port.write(b'u')
        extension = ' '.join(word_list[2:])
        inf = pywhatkit.info(extension)
        talk(inf)
    elif word_list[0] == 'open':
        port.write(b'l')
        talk("Opening, sir")
        url = f"http://{''.join(word_list[1:])}"  
        webbrowser.open(url)
    elif word_list[0] in ['uppercut', 'smash', 'punch']:
        port.write(word_list[0][0].encode())
    elif 'alarm' in words:
        set_alarm(' '.join(word_list[1:]))
    elif 'weather' in words:
        get_weather('नोएडा')  # Assuming "नोएडा" is a placeholder for location
    elif 'news' in words:
        get_news()
    elif 'time' in words:
        get_current_time()
    elif 'location' in words or 'gps' in words:
        get_location()
    elif 'calculator' in words:
        expression = ' '.join(word_list[1:])
        calculator(expression)
    elif 'convert' in words:
        amount = float(word_list[1])
        from_currency = word_list[2]
        to_currency = word_list[4]
        convert_currency(amount, from_currency, to_currency)
    elif 'send message to' in words:
        contact_name = words.split("send message to")[-1].strip()
        process_whatsapp_message(contact_name)
    else:
        for word in word_list:
            if word in hi_words:
                port.write(b'h')               
                talk(random.choice(hi_words))
            elif word in bye_words:
                talk(random.choice(bye_words))
            elif word.lower() in ["how are you", "what's your name", "tell me a joke", "thank you"]:
                casual_conversation(word.lower())

def talk(sentence):
    """ Talk / respond to the user """
    engine.say(sentence)
    engine.runAndWait()

def save_alarm(alarm_time):
    """Save an alarm time to the alarms.json file."""
    alarms = load_alarms()
    alarms.append(alarm_time)
    with open(alarm_file, 'w') as f:
        json.dump(alarms, f)

def load_alarms():
    """Load alarm times from alarms.json file."""
    if os.path.exists(alarm_file):
        with open(alarm_file, 'r') as f:
            return json.load(f)
    return []

def set_alarm(time_str):
    """Set an alarm for a specific time."""
    time_str = time_str.lower().replace('a.m.', 'AM').replace('p.m.', 'PM')
    alarm_time = datetime.datetime.strptime(time_str, "%I:%M %p")
    save_alarm(alarm_time.isoformat())
    talk(f"Alarm set for {time_str}")

def get_weather(city_name):
    """Get weather information for a given city."""
    url = "https://api.openweathermap.org/data/2.5/weather"
    params = {"q": city_name, "appid": API_KEY, "units": "metric"}
    try:
        response = requests.get(url, params=params)
        data = response.json()
        if response.status_code == 200:
            weather_info = (
                f"The weather in {city_name} is {data['weather'][0]['description']}. "
                f"Temperature is {data['main']['temp']}°C, humidity is {data['main']['humidity']}%, "
                f"and wind speed is {data['wind']['speed']} m/s."
            )
            talk(weather_info)
        else:
            talk(f"Sorry, I couldn't fetch the weather information for {city_name} right now.")
    except Exception as e:
        talk(f"Sorry, there was an error: {e}")

def get_news():
    """Get top news headlines."""
    url = "https://newsapi.org/v2/top-headlines"
    params = {"country": "in", "apiKey": NEWS_API_KEY}
    try:
        response = requests.get(url, params=params)
        data = response.json()
        if response.status_code == 200:
            news_info = "Here are some of the latest news headlines: " + ". ".join(article['title'] for article in data['articles'][:3])
            talk(news_info)
        else:
            talk("Sorry, I couldn't fetch the news right now.")
    except Exception as e:
        talk(f"Sorry, there was an error fetching the news: {e}")

def get_current_time():
    """Get the current time and speak it."""
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    talk(f"The current time is {current_time}.")

def get_location():
    """Fetch current location based on IP geolocation."""
    try:
        g = geocoder.ip('me')
        city, country = g.city, g.country
        talk(f"You are currently in {city}, {country}.")
    except Exception as e:
        talk(f"Sorry, there was an error: {e}")

def calculator(expression):
    """Evaluate a mathematical expression."""
    try:
        result = eval(expression)
        talk(f"The result of {expression} is {result}")
    except Exception as e:
        talk(f"Sorry, there was an error calculating the result. Error: {e}")

def convert_currency(amount, from_currency, to_currency):
    """Convert currency from one unit to another."""
    conversion_rate = 74.0  # Example rate
    converted_amount = amount * conversion_rate
    talk(f"{amount} {from_currency} is equal to {converted_amount} {to_currency}")

def process_whatsapp_message(contact_name):
    """Process and send a WhatsApp message."""
    try:
        speak(f"What message do you want to send to {contact_name} on WhatsApp?")
        message_content = input("Enter your message: ")  # Simulated input for message content
        # send_whatsapp_message(contact_name, message_content)
        # Implement sending message functionality
    except Exception as e:
        talk(f"Sorry, there was an error: {e}")

def casual_conversation(query):
    """Respond to casual conversation queries."""
    responses = {
        "how are you": [
            "I'm just a program, but thanks for asking!",
            "I'm here and ready to help!",
        ],
        "what's your name": [
            "I'm jaundice, your virtual assistant.",
            "You can call me jaundice.",
        ],
        "tell me a joke": [
            "Why did the computer go to the doctor? Because it had a virus!",
            "Why was the computer cold? It left its Windows open!",
        ],
        "thank you": [
            "You're welcome! I'm here to help.",
            "No problem! Happy to assist.",
        ],
    }
    
    response = random.choice(responses.get(query, ["I'm here to help with anything you need!"]))
    talk(response)

# Main loop
while True:
    listen()
